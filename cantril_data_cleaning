#!/bin/bash
#Author: Zihao Wang,24284623
#input: three:homicide-rate-unodc.tsv,life-satisfaction-vs-life-expectancy.tsv, gdp-vs-happiness.tsv,any order
#output:tab-separated data directed,to standard output.

#check if the number of the arguments is correct
if [[ "$#" -ne 3 ]]
then
    echo "Usage: $0 <homicide-rate-unodc.tsv> <life-satisfaction-vs-life-expectancy.tsv> <gdp-vs-happiness.tsv>,any order" >/dev/stderr
    exit 1
fi

#check if can't find the file or has zero length
for file in "$1" "$2" "$3"
do
	if [[ ! -s "$file" ]]
	then
		echo "The named input file $1 or $2 or $3 does not exist or has zero length" >/dev/stderr
		exit 1
	fi
done


#check if files are tab-separated foramt,get the head line
check_tab_separated() {
    header=$(head -n 1 "$1")
    if [[ ! "$header" == *$'\t'* ]]
    then
        echo "$1 is not a tab-separated foramt file,check it" >/dev/stderr
        exit 1
    fi
}

#remove the column with header Continent
remove_continent_column() {
    local input_file="$1"
    local conti_column="Continent"

    # check the first line and get the number of column with the name"continent"
    local conti_col=$(awk -F'\t' -v target="$conti_column" 'NR==1 { for (i=1; i<=NF; i++) { if ($i == target) print i } }' "$input_file")

    # use AWk to delete the target column with all the lines,also delete the \t
    if [[ -n "$conti_col" ]]
    then
        awk -F'\t' -v conti_col="$conti_col" 'BEGIN { OFS=FS } { $conti_col=""; sub(/\t$/, "") } 1' "$input_file"
    #no found "continent" column
    else
    	cat "$input_file"
    fi
}

filter_data() {
	#find the number of the column"code" and "year"
    awk -F'\t' 'NR==1 {
        for (i=1; i<=NF; i++) {
            if ($i == "Code") code_col=i
            if ($i == "Year") year_col=i
        }
        print
    }
    NR>1 {
        if ($code_col != "" && $year_col >= 2011 && $year_col <= 2021) {
            print
        }
    }' "$1"
    #if code not empty and year is in [2011,2021],print
}

#count how many numbers in each line
check_cell_count() {
    local file=$1
    #get the number of columns in first line
    local header_count=$(awk -F'\t' 'NR==1 {print NF}' "$file")
    #check each lines'number except first line
    awk -F'\t' -v header_count="$header_count" 'NR>1 && NF != header_count {
        print "Line " NR " in " FILENAME " has the wrong number of cells." > "/dev/stderr"
    }' "$file"
}

#Integrate the above functions here
process_file() {
    local input_file=$1
    local output_file=$2
#set a temporary file for ease of handling
    local temp_file=$(mktemp)

    check_tab_separated "$input_file"
    remove_continent_column "$input_file" > "$output_file"
    filter_data "$output_file" > "$temp_file"
    check_cell_count "$temp_file"
    mv "$temp_file" "$output_file" 
}

#we don't know the order of three inputs,so we need use their name to name the cleaned data
filename1=$(basename "$1" .tsv)
filename2=$(basename "$2" .tsv)
filename3=$(basename "$3" .tsv)
process_file "$1" "${filename1}_clean.tsv"
process_file "$2" "${filename2}_clean.tsv"
process_file "$3" "${filename3}_clean.tsv"

#get the first line (header),and sort the data from the second line use the first three cells
{ head -n 1 gdp-vs-happiness_clean.tsv; tail -n +2 gdp-vs-happiness_clean.tsv | sort -k1,1 -k2,2 -k3,3; } > sorted_gdp.tsv
{ head -n 1 homicide-rate-unodc_clean.tsv; tail -n +2 homicide-rate-unodc_clean.tsv  | sort -k1,1 -k2,2 -k3,3; } > sorted_homicide.tsv
{ head -n 1 life-satisfaction-vs-life-expectancy_clean.tsv; tail -n +2 life-satisfaction-vs-life-expectancy_clean.tsv  | sort -k1,1 -k2,2 -k3,3; } > sorted_life_expectancy.tsv

#order:<Entity/Country> <Code> <Year> <GDP per capita> <Population> <Homicide Rate> <Life Expectancy> <Cantril Ladder score>

#combine the sorted files,combine two at one time
awk 'BEGIN {FS = OFS = "\t"}
     NR == FNR {data1[$1,$2,$3] = $4 ; next} 
     {print $0, data1[$1,$2,$3] }' sorted_homicide.tsv sorted_gdp.tsv > middle_result.tsv
#for gdp $4:Cantril ladder score,$5:GDP,$6:Population ,for sorted_homicide $4:Homicide
awk 'BEGIN {FS = OFS = "\t"} 
     NR == FNR {data2[$1,$2,$3] = $1 "\t" $2 "\t" $3 "\t" $5 "\t" $6 "\t" $7; data3[$1,$2,$3] = $4 ; next} 
     {print data2[$1,$2,$3],$4 ,data3[$1,$2,$3]  }' middle_result.tsv sorted_life_expectancy.tsv
#$4:Life expectancy


#clean the file not used in the future
rm gdp-vs-happiness_clean.tsv homicide-rate-unodc_clean.tsv life-satisfaction-vs-life-expectancy_clean.tsv 
rm sorted_gdp.tsv sorted_homicide.tsv sorted_life_expectancy.tsv middle_result.tsv